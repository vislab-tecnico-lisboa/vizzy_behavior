<root main_tree_to_execute="BehaviorTree">
    <!-- ////////// -->
    <BehaviorTree ID="BehaviorTree">
        <Fallback>
            <Sequence>
                <SubTree ID="charging_full_st"/>
                <Action ID="DebugAction" string="Vou patrulhar"/>
                <Action ID="GeneralActionlib" action_name="random_movement" constants="0,1,3" variables="" result="result"/>
                <Action goal_pose="{result}" ID="MoveBase" action_name="move_base" frame_id="map"/>
                <Action ID="DebugAction" string="cheguei!"/>
                <Action seconds="5" ID="WaitForXSeconds" result="SUCCESS"/>
            </Sequence>
            <Action ID="CallEmptySrv" service_name="/move_base/clear_costmaps"/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="ChargeST">
        <SequenceStar>
            <Action language="pt_PT" voice="pt-PT-Wavenet-D" ID="Speak" utterance="Tenho fome" action_name="/gcloud_tts"/>
            <Action seconds="2" ID="WaitForXSeconds" name="Wait2Seconds" result="SUCCESS"/>
            <RetryUntilSuccesful num_attempts="3">
                <Action goal_pose="-4.88723403052;-6.0285904746;0.0;0.0;0.0;0.997843662386;0.0503172395835" ID="MoveBase" name="Go to first point" action_name="move_base" frame_id="map"/>
            </RetryUntilSuccesful>
            <Parallel failure_threshold="1" success_threshold="2">
                <Action ID="Charge" action_name="charging_action" action="CHARGE"/>
                <Repeat num_cycles="10">
                    <Action language="pt_PT" voice="pt-PT-Wavenet-D" ID="Speak" utterance="bip bip" action_name="/gcloud_tts"/>
                </Repeat>
            </Parallel>
        </SequenceStar>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="charging_full_st">
        <Sequence>
            <Fallback>
                <Sequence>
                    <Action ID="DebugAction" string="checking battery state"/>
                    <Action percentage="k_bat_perc" ID="CheckBattery" battery_state="k_bat_state" service_name="/vizzy_batteries_state"/>
                    <Condition A="{k_bat_state}" Condition="==" ID="CompareInt" B="3"/>
                    <Action ID="CheckCharging" service_name="battery_charging_state" charging_state="charge_state"/>
                    <Condition A="{charge_state}" Condition="==" ID="CompareInt" B="0"/>
                    <SubTree ID="ChargeST"/>
                </Sequence>
                <Sequence>
                    <Action ID="DebugAction" string="checking if batteries are charged"/>
                    <Action ID="CheckCharging" service_name="battery_charging_state" charging_state="charge_state"/>
                    <Condition A="{charge_state}" Condition="==" ID="CompareInt" B="1"/>
                    <Action percentage="k_bat_perc" ID="CheckBattery" battery_state="k_bat_state" service_name="/vizzy_batteries_state"/>
                    <Condition A="{k_bat_state}" Condition="==" ID="CompareInt" B="0"/>
                    <Action language="pt_PT" voice="pt-PT-Wavenet-D" ID="Speak" utterance="Estou cheio, vou sair da estação" action_name="/gcloud_tts"/>
                    <Action ID="Charge" action_name="charging_action" action="STOP_CHARGE"/>
                </Sequence>
                <Sequence>
                    <Action ID="DebugAction" string="check if failed"/>
                    <Action percentage="k_bat_perc" ID="CheckBattery" battery_state="k_bat_state" service_name="/vizzy_batteries_state"/>
                    <Condition A="{k_bat_state}" Condition="==" ID="CompareInt" B="3"/>
                    <Action ID="CheckCharging" service_name="battery_charging_state" charging_state="charge_state"/>
                    <Condition A="{charge_state}" Condition="==" ID="CompareInt" B="0"/>
                    <Action language="pt_PT" voice="pt-PT-Wavenet-D" ID="Speak" utterance="Ajudem-me, tenho fome e não consigo carregar" action_name="/gcloud_tts"/>
                    <Action ID="CallEmptySrv" service_name="/move_base/clear_costmaps"/>
                    <Action seconds="10" ID="WaitForXSeconds" result="SUCCESS"/>
                </Sequence>
                <Sequence>
                    <Action percentage="k_bat_perc" ID="CheckBattery" battery_state="k_bat_state" service_name="/vizzy_batteries_state"/>
                    <Condition A="{k_bat_state}" Condition="!=" ID="CompareInt" B="3"/>
                </Sequence>
            </Fallback>
            <Sequence>
                <Action ID="CheckCharging" service_name="battery_charging_state" charging_state="charge_state"/>
                <Condition A="{charge_state}" Condition="==" ID="CompareInt" B="0"/>
                <Action ID="DebugAction" string="I can move"/>
            </Sequence>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Action ID="ArmCartesian">
            <input_port name="action_name"/>
            <input_port name="frame_id"/>
            <input_port name="pose"/>
            <input_port name="type"/>
        </Action>
        <Action ID="ArmRoutines">
            <input_port name="gesture"/>
            <input_port name="topic"/>
        </Action>
        <Action ID="CallEmptySrv">
            <input_port name="service_name"/>
        </Action>
        <Action ID="Charge">
            <input_port name="action"/>
            <input_port name="action_name"/>
        </Action>
        <SubTree ID="ChargeST"/>
        <Action ID="CheckBattery">
            <output_port type="int" name="battery_state"/>
            <output_port type="double" name="percentage"/>
            <input_port type="std::string" name="service_name"/>
        </Action>
        <Condition ID="CheckBool">
            <input_port name="variable"/>
        </Condition>
        <Action ID="CheckCharging">
            <output_port type="int" name="charging_state"/>
            <input_port type="std::string" name="service_name"/>
        </Action>
        <Condition ID="CompareDouble">
            <input_port name="A"/>
            <input_port name="B"/>
            <input_port name="Condition"/>
        </Condition>
        <Condition ID="CompareInt">
            <input_port name="A"/>
            <input_port name="B"/>
            <input_port name="Condition"/>
        </Condition>
        <Action ID="DebugAction">
            <input_port type="std::string" name="string"/>
        </Action>
        <Action ID="Destroy"/>
        <Action ID="DetectBlocks">
            <output_port type="social_cues::BlockList_&lt;std::allocator&lt;void> >" name="block_list"/>
            <input_port type="std::string" name="block_topic"/>
        </Action>
        <Action ID="DetectFaces">
            <output_port name="faceListOut"/>
            <input_port name="face_topic"/>
        </Action>
        <Action ID="FaceCounter">
            <input_port name="faceListIn"/>
            <input_port name="number_faces"/>
        </Action>
        <Action ID="GazeAtTarget">
            <input_port name="action_name"/>
            <input_port name="fixation_pose"/>
            <input_port name="frame_id"/>
        </Action>
        <Action ID="GeneralActionlib">
            <input_port name="action_name"/>
            <input_port name="constants">A coma separated list of constants.</input_port>
            <output_port name="result">This is a string</output_port>
            <input_port name="variables">A coma separated list of variables.</input_port>
        </Action>
        <Action ID="GetFloat64">
            <output_port type="double" name="number"/>
            <input_port type="std::string" name="topic"/>
        </Action>
        <Action ID="GetInt16">
            <output_port name="number"/>
            <input_port name="topic"/>
        </Action>
        <Action ID="GetPoseArray">
            <output_port name="pose_array"/>
            <input_port name="topic"/>
        </Action>
        <Action ID="GiveFeedback">
            <input_port default="850" name="almost_thr"/>
            <input_port name="correct_blocks"/>
            <input_port name="incorrect_blocks"/>
            <input_port default="0" name="personality"/>
            <input_port name="score"/>
        </Action>
        <Action ID="MoveBase">
            <input_port name="action_name"/>
            <input_port name="frame_id"/>
            <input_port name="goal_pose"/>
        </Action>
        <Action ID="MoveTorso">
            <input_port name="angle"/>
            <input_port name="topic"/>
        </Action>
        <Action ID="ResetVars"/>
        <Action ID="SelectBlock">
            <input_port type="social_cues::BlockList_&lt;std::allocator&lt;void> >" name="block_list"/>
            <output_port type="geometry_msgs::PoseStamped_&lt;std::allocator&lt;void> >" name="block_pose"/>
            <input_port type="std::string" name="position_in_list"/>
        </Action>
        <Action ID="SelectFieldFromPoseStamped">
            <input_port name="field"/>
            <output_port name="output_val"/>
            <input_port name="pose_stamped"/>
        </Action>
        <Action ID="SelectPose">
            <input_port name="pose_array"/>
            <input_port name="pose_stamped"/>
            <input_port name="position_in_list"/>
        </Action>
        <Action ID="SenseScore">
            <output_port name="score"/>
            <input_port name="score_topic"/>
        </Action>
        <Action ID="Speak">
            <input_port name="action_name"/>
            <input_port name="language"/>
            <input_port name="utterance"/>
            <input_port name="voice"/>
        </Action>
        <SubTree ID="SubTree"/>
        <Action ID="TimerAction">
            <input_port name="s_between_success">Time (s) before this node returns SUCCESS. It will return FAILURE in the meanwhile</input_port>
        </Action>
        <Action ID="WaitForXSeconds">
            <input_port default="SUCCESS" name="result">Result after specified time: SUCCESS or FAILURE</input_port>
            <input_port default="5" name="seconds">Time in seconds</input_port>
        </Action>
        <SubTree ID="charging_full_st"/>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

